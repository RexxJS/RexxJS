#!/bin/bash

# rexx - Universal REXX script runner for RexxJS
# Works both in-repo (development) and as installed tool (production)
# Usage: rexx <script.rexx> [options]

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show help
show_help() {
    echo "RexxJS Script Runner"
    echo "Usage: $0 <script.rexx> [options]"
    echo ""
    echo "This script runs REXX files using the RexxJS interpreter."
    echo "External services (DOM, file system, RPC) are mocked for local execution."
    echo ""
    echo "Options:"
    echo "  --help, -h        Show this help message"
    echo "  --verbose, -v     Show verbose output"
    echo "  --node-args ARGS  Pass additional arguments to Node.js"
    echo ""
    echo "Examples:"
    echo "  $0 my-script.rexx"
    echo "  $0 script.rexx --verbose"
    echo "  $0 script.rexx --node-args '--max-old-space-size=4096'"
    echo ""
}

# Detect execution mode and find CLI script
detect_rexxjs_installation() {
    local SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}")"
    local SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
    
    # Mode 1: In-repo development mode
    # Look for src/cli.js relative to this script
    if [ -f "$SCRIPT_DIR/cli.js" ]; then
        # We're in src/ directory
        REXXJS_CLI="$SCRIPT_DIR/cli.js"
        REXXJS_MODE="development (in src/)"
        return 0
    elif [ -f "$SCRIPT_DIR/../src/cli.js" ]; then
        # We're in repo root, src/ is one level down
        REXXJS_CLI="$SCRIPT_DIR/../src/cli.js"
        REXXJS_MODE="development (repo root)"
        return 0
    elif [ -f "$SCRIPT_DIR/src/cli.js" ]; then
        # We're in repo root, src/ is subdirectory
        REXXJS_CLI="$SCRIPT_DIR/src/cli.js"
        REXXJS_MODE="development (repo root)"
        return 0
    fi
    
    # Mode 2: Installed tool mode
    # Look for bundled CLI in standard locations
    local INSTALL_LOCATIONS=(
        "/usr/local/lib/rexxjs/cli.js"
        "/usr/lib/rexxjs/cli.js"
        "$HOME/.local/lib/rexxjs/cli.js"
        "/opt/rexxjs/cli.js"
    )
    
    for location in "${INSTALL_LOCATIONS[@]}"; do
        if [ -f "$location" ]; then
            REXXJS_CLI="$location"
            REXXJS_MODE="installed ($location)"
            return 0
        fi
    done
    
    # Mode 3: Node.js global package mode
    # Try to find via npm global packages
    if command -v npm &> /dev/null; then
        local NPM_GLOBAL_DIR="$(npm root -g 2>/dev/null || echo "")"
        if [ -n "$NPM_GLOBAL_DIR" ] && [ -f "$NPM_GLOBAL_DIR/rexxjs/src/cli.js" ]; then
            REXXJS_CLI="$NPM_GLOBAL_DIR/rexxjs/src/cli.js"
            REXXJS_MODE="npm global"
            return 0
        fi
    fi
    
    # Mode 4: Try same directory as this script (bundled deployment)
    if [ -f "$SCRIPT_DIR/rexxjs-cli.js" ]; then
        REXXJS_CLI="$SCRIPT_DIR/rexxjs-cli.js"
        REXXJS_MODE="bundled"
        return 0
    fi
    
    return 1
}

# Check if no arguments provided
if [ $# -eq 0 ]; then
    print_error "No script file provided"
    echo ""
    show_help
    exit 1
fi

# Check for help flag
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    show_help
    exit 0
fi

# Parse arguments
SCRIPT_FILE=""
NODE_ARGS=""
CLI_ARGS=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --node-args)
            NODE_ARGS="$2"
            shift 2
            ;;
        --verbose|-v)
            CLI_ARGS="$CLI_ARGS $1"
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        -*)
            print_error "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
        *)
            if [ -z "$SCRIPT_FILE" ]; then
                SCRIPT_FILE="$1"
            else
                print_error "Multiple script files specified: $SCRIPT_FILE and $1"
                exit 1
            fi
            shift
            ;;
    esac
done

# Check if script file was provided
if [ -z "$SCRIPT_FILE" ]; then
    print_error "No script file provided"
    echo ""
    show_help
    exit 1
fi

# Check if Node.js is available
if ! command -v node &> /dev/null; then
    print_error "Node.js is not installed or not in PATH"
    echo "Please install Node.js to run REXX scripts"
    exit 1
fi

# Detect RexxJS installation
if ! detect_rexxjs_installation; then
    print_error "RexxJS installation not found"
    echo ""
    echo "Searched for RexxJS in:"
    echo "  - Current directory (development mode)"
    echo "  - /usr/local/lib/rexxjs/"
    echo "  - /usr/lib/rexxjs/"
    echo "  - ~/.local/lib/rexxjs/"
    echo "  - /opt/rexxjs/"
    echo "  - npm global packages"
    echo ""
    echo "Please install RexxJS or run from the RexxJS repository directory."
    exit 1
fi

# Check if the REXX script file exists
if [ ! -f "$SCRIPT_FILE" ]; then
    print_error "Script file not found: $SCRIPT_FILE"
    exit 1
fi

# Print startup info
print_info "RexxJS Script Runner ($REXXJS_MODE)"
print_info "Script: $SCRIPT_FILE"
if [ -n "$NODE_ARGS" ]; then
    print_info "Node.js args: $NODE_ARGS"
fi
if [ -n "$CLI_ARGS" ]; then
    print_info "CLI args: $CLI_ARGS"
fi

echo ""

# Execute the script
if [ -n "$NODE_ARGS" ]; then
    exec node $NODE_ARGS "$REXXJS_CLI" "$SCRIPT_FILE" $CLI_ARGS
else
    exec node "$REXXJS_CLI" "$SCRIPT_FILE" $CLI_ARGS
fi