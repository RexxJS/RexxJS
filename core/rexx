#!/bin/bash

# rexx - Shell wrapper for running REXX scripts locally with Node.js
# Usage: ./rexx <script.rexx> [options]

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show help
show_help() {
    echo "RexxJS Script Runner"
    echo "Usage: $0 <script.rexx> [options] [-- script-args...]"
    echo ""
    echo "This script runs REXX files locally using Node.js and the RexxJS interpreter."
    echo "External services (DOM, file system, RPC) are mocked for local execution."
    echo ""
    echo "Options:"
    echo "  --help, -h        Show this help message"
    echo "  --verbose, -v     Show verbose output"
    echo "  --node-args ARGS  Pass additional arguments to Node.js"
    echo "  --                Everything after -- is passed to the REXX script as ARG(1), ARG(2), etc."
    echo ""
    echo "Examples:"
    echo "  $0 tests/scripts/simple-command.rexx"
    echo "  $0 my-script.rexx --verbose"
    echo "  $0 script.rexx --node-args '--max-old-space-size=4096'"
    echo "  $0 script.rexx -- arg1 arg2 arg3          # Pass arguments to script"
    echo "  $0 script.rexx --verbose -- hello world   # Verbose mode + script args"
    echo ""
    echo "Available test scripts:"
    echo "  tests/scripts/simple-command.rexx      - Basic command execution"
    echo "  tests/scripts/with-variables.rexx      - Variable assignment and conditionals"
    echo "  tests/scripts/conditional-cooking.rexx - Complex conditional logic"
    echo "  tests/scripts/expression-examples.rexx - Mathematical expressions"
    echo "  tests/scripts/loop-examples.rexx       - Loop constructs"
    echo "  tests/scripts/select-examples.rexx     - SELECT/WHEN statements"
}

# Check if no arguments provided
if [ $# -eq 0 ]; then
    print_error "No script file provided"
    echo ""
    show_help
    exit 1
fi

# Check for help flag
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    show_help
    exit 0
fi

# Parse arguments
SCRIPT_FILE=""
NODE_ARGS=""
CLI_ARGS=""
SCRIPT_ARGS=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --node-args)
            NODE_ARGS="$2"
            shift 2
            ;;
        --verbose|-v)
            CLI_ARGS="$CLI_ARGS $1"
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        --)
            # Everything after -- is passed to the script
            shift
            SCRIPT_ARGS="$@"
            break
            ;;
        -*)
            print_error "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
        *)
            if [ -z "$SCRIPT_FILE" ]; then
                SCRIPT_FILE="$1"
            else
                print_error "Multiple script files specified: $SCRIPT_FILE and $1"
                exit 1
            fi
            shift
            ;;
    esac
done

# Check if script file was provided
if [ -z "$SCRIPT_FILE" ]; then
    print_error "No script file provided"
    echo ""
    show_help
    exit 1
fi

# Check if Node.js is available
if ! command -v node &> /dev/null; then
    print_error "Node.js is not installed or not in PATH"
    echo "Please install Node.js to run REXX scripts locally"
    exit 1
fi

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Check if we're in the correct directory (has src/ and cli.js)
if [ ! -d "$SCRIPT_DIR/src" ] || [ ! -f "$SCRIPT_DIR/src/cli.js" ]; then
    print_error "This script must be run from the RexxJS root directory"
    print_error "Expected to find src/ directory and cli.js file"
    exit 1
fi

# Check if the REXX script file exists
if [ ! -f "$SCRIPT_FILE" ]; then
    print_error "Script file not found: $SCRIPT_FILE"
    
    # Suggest available test scripts if the file doesn't exist
    if [ -d "$SCRIPT_DIR/tests/scripts" ]; then
        echo ""
        print_info "Available test scripts in tests/scripts/:"
        for script in "$SCRIPT_DIR/tests/scripts"/*.rexx; do
            if [ -f "$script" ]; then
                echo "  $(basename "$script")"
            fi
        done
    fi
    exit 1
fi

# Print startup info
print_info "RexxJS Script Runner starting..."
print_info "Script: $SCRIPT_FILE"
if [ -n "$NODE_ARGS" ]; then
    print_info "Node.js args: $NODE_ARGS"
fi
if [ -n "$CLI_ARGS" ]; then
    print_info "CLI args: $CLI_ARGS"
fi

echo ""

# Execute the script
if [ -n "$NODE_ARGS" ]; then
    exec node $NODE_ARGS "$SCRIPT_DIR/src/cli.js" "$SCRIPT_FILE" $CLI_ARGS $SCRIPT_ARGS
else
    exec node "$SCRIPT_DIR/src/cli.js" "$SCRIPT_FILE" $CLI_ARGS $SCRIPT_ARGS
fi